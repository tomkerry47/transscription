# Local Whisper Transcription Server Setup

This document outlines the steps to set up and run the local Whisper transcription server.

## 1. Install Python

If you don't have Python installed, download and install it from [python.org](https://python.org). Make sure to check the box that says "Add Python to PATH" during installation.

## 2. Install Dependencies

Open a terminal or command prompt and run the following commands to install the necessary Python libraries:

```bash
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
pip install transformers
pip install websockets
```

## 3. Run the Server

Open a terminal in the same directory as the `whisper_server.py` file and run the following command:

```bash
python whisper_server.py
```

You should see the message "Whisper server started on ws://0.0.0.0:8765. Ready for connections.".
import asyncio
import websockets
import json
import torch
from transformers import pipeline

# Setup the Whisper pipeline
# If you have a CUDA-compatible GPU, it will be used. Otherwise, it will use the CPU.
device = "cuda:0" if torch.cuda.is_available() else "cpu"
pipe = pipeline(
    "automatic-speech-recognition",
    model="openai/whisper-base.en", # You can choose other models like whisper-medium.en for better accuracy
    device=device
)

async def transcribe(websocket, path):
    print("Client connected.")
    try:
        async for message in websocket:
            # The message is expected to be raw audio data (bytes)
            if isinstance(message, bytes):
                # Process the audio data
                result = pipe(message)
                # Send back the transcription result
                await websocket.send(json.dumps({
                    "text": result["text"]
                }))

# Listen on all available network interfaces on port 8765
start_server = websockets.serve(transcribe, "0.0.0.0", 8765)

print("Whisper server started on ws://0.0.0.0:8765. Ready for connections.")
asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()


PS C:\TranscriptionV2> python server.py
Device set to use cuda:0
Traceback (most recent call last):
  File "C:\TranscriptionV2\server.py", line 34, in <module>
    start_server = websockets.serve(transcribe, "0.0.0.0", 8765)
  File "C:\Users\ISadmin\AppData\Local\Programs\Python\Python310\lib\site-packages\websockets\asyncio\server.py", line 743, in __init__
    self.server = Server(
  File "C:\Users\ISadmin\AppData\Local\Programs\Python\Python310\lib\site-packages\websockets\asyncio\server.py", line 284, in __init__
    self.loop = asyncio.get_running_loop()
RuntimeError: no running event loop
    except websockets.exceptions.ConnectionClosedOK:
        print("Client disconnected.")
    except Exception as e:
        print(f"An error occurred: {e}")
